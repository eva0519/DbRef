
SQLPlus   cli 기반 OracleDB 관리 프로그램
SQLDeveloper   gui 기반 OracleDB 관리 프로그램   (CTRL+ENTER   블록된 명령어 실행)

오브젝트로 이루어진 데이터베이스 구조 -> SCHEMA
테이블 내의 다루고자 하는 개념상의 데이터 -> ENTITY


DDL
CREATE ALTER DROP

DML
INSERT SELECT UPDATE DELETE

DCL
GRANT REVOKE

Data Types
Character   'abcd', 'A', '148'
Numeric	   38, 3.85, 3.85F, 137		
Date         '2013-02-09'
LOB          '2019-06-03 10.38.29.00000'

Character Type
CHAR [(size [BYTE | CHAR])]   CHAR(3) 고정길이 3바이트 할당. size 1당 1바이트.
VCHAR2 (size [BYTE | CHAR])   VARCHAR2(3) 가변길이 3바이트.
NCHAR [(size)]   NCHAR(2)   16비트 UTF 인코딩 테이블 사용. size 1당 2바이트. 외국어 2글자.
NVARCHAR2 (size)
CLOB   대용량 텍스트 데이터 타입(최대 4G) 
NCLOB   대용량 텍스트 유니코드 데이터 타입(최대 4G)
MAX SIZE : STANDARD 4000bytes, EXTENDED 32767 bytes

Numeric Type
NUMBER[(p[,s])]
NUMBER(4)
NUMBER(6,2)   소수점 2자리를 포함한 최대6자리
NUMBER(6,-2)   소수점 -2자리에서 반올림하는 최대6자리
NUMBER   NUMBER(38,*)
NUMBER(*,5)   NUMBER(38,5)   

Date Type
DATE   4712 BC~9999 AD (EX:01-JAN-99)
TIMESTAMP     NLS_TIMESTAMP_FORMAT 파라미터에 명시된 값을 따름
TIMESTAMP WITH TIME ZONE     NLS_TIMESTAMP_TZ_FORMAT 파라미터에 명시된 값을 따름
TIMESTAMP WITH LOCAL TIME ZONE     NLS_TIMESTAMP_FORMAT 파라미터에 명시된 값을 따름



테이블 구성 예

CREATE TABLE NOTICE
(
  ID			NUMBER,
  TITLE			NVARCHAR2(100),
  WRITER_ID		NVARCHAR2(50),
  CONTENT		CLOB,
  REGDATE		TIMESTAMP,
  HIT			NUMBER,
  FILES			NVARCHAR2(1000)
);

CREATE TABLE "COMMENT"
(
  ID		 	NUMBER,
  CONTENT	 	NVARCHAR2(2000),
  REGDATE	    	TIMESTAMP,
  WRITER_ID		NVARCHAR2(50),
  NOTICE_ID		NUMBER
);

CREATE TABLE ROLE
(
  ID		        	VARCHAR2(50),
  DISCRIPTION	    	NVARCHAR2(500)
);

CREATE TABLE MEMBER_ROLE
(
  MEMBER_ID		    NVARCHAR2(50),
  ROLE_ID	        VARCHAR2(50)
);



명령어 사용 예)
(명령어는 대소문자를 가리지 않음)
(예약어 또는 공백을 사용하고 싶다면 큰따옴표로 감싸준다. 큰 따옴표 감쌀 시 대소문자 가림)


DDL
CREATE TABLE 생성할테이블이름;   
DROP TABLE 삭제할테이블이름;
ALTER TABLE 테이블이름 MODIFY 속성명 수정할데이터타입;
ALTER TABLE 테이블이름 DROP COLUMN 삭제할속성명;
ALTER TABLE 테이블이름 ADD 추가할속성명 데이터타입;


DML
INSERT INTO 테이블이름 (속성명1, 속성명2) VALUES('넣을값1', '넣을값2');   
-지정하지 않을 시 NULL값 입력. 값은 대소문자 가림.

SELECT * FROM 확인할테이블이름;
SELECT 속성명 바꿀속성명, 속성명2  FROM 확인할테이블이름;   
-애플리케이션과 DB의 속성명이 다를 시 쿼리문 작성할 때 속성명을 변경해서 애플리케이션에 제공
SELECT * FROM NLS_DATABASE_PARAMETERS;   
-환경설정 확인
SELECT LENGTH('한글') FROM DUAL;   
-문자 갯수 확인
SELECT LENGTHB('한글') FROM DUAL;   
-문자 바이트 확인

UPDATE 테이블이름 SET 속성명1='바꿀값1', 속성명2,='바꿀값2' WHERE 속성명='찾을값';
-테이블 내 모든 속성값을 바꿀게 아니라면 UPDATE 사용 시 반드시 조건절 WHERE을 사용해야한다.

DELETE 테이블이름 WHERE 속성명='삭제할값';
-테이블 내 모든 속성값을 삭제할게 아니라면 반드시 조건절 WHERE을 사용해야한다.
-삭제할 값이 속한 COLUMN을 삭제한다.



JDBC

자바로 OracleDB에 접속하기 위한 라이브러리
jdbc driver를 jdk와 OracleDB의 버전에 맞게 오라클 홈페이지에서 다운 받아 프로젝트의 build path에 등록


SELECT 등 DB를 조회하여 값을 가져올 때)
String url = "jdbc:oracle:thin:@아이피:1521/사용할디비이름";
String sql = "쿼리문";

Class.forName("oracle.jdbc.driver.OracleDriver");
Connection con = DriverManager.getConnection(url, "디비아이디", "디비암호");
Statement st = con.createStatement();
ResultSet rs = st.executeQuery(sql);
		
// rs.next();
// column 한줄 씩 읽기
whie(rs.next()) {
	int id = rs.getInt("ID");
	System.out.println(id);
}

rs.close();
st.close();
con.close();
		

INSERT, UPDATE, DELETE 등 DB를 조작할 때)
		String title = "TEST";
		String writerId = "abcd";
		String content = "wow";
		String files = "";
		
		String url = "jdbc:oracle:thin:@아이피:1521/사용할디비이름";
		String sql = "INSERT INTO notice ("
				+ "    title,"
				+ "    writer_id,"
				+ "    content,"
				+ "    files"
				+ ") VALUES (?,?,?,?)";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection(url, "디비아이디", "디비암호");
		PreparedStatement st = con.prepareStatement(sql);
		// 쿼리문의 ?에 index는 1부터 시작.
		st.setString(1, title);
		st.setString(2, writerId);
		st.setString(3, content);
		st.setString(4, files);
		int result = st.executeUpdate();
		// executeUpdate 메서드는 DML 실행된 Rows 정수 결과값을 반환한다.
		
		System.out.println(result);
		
		st.close();
		con.close();

st.set타입(인덱스, 넣을값변수) 시 넣을값은 홑따옴표에 감싸인 값 형태로 들어간다.
명령문 형식으로 들어가길 바란다면 쿼리문을 "SELECT * FROM 테이블 WHERE " + 넣을값변수 + " LIKE~"로 넣어주어야함



뷰 생성, 페이징 쿼리 작성

SELECT * FROM 테이블 ORDER BY 속성명 DESC;    
-속성명으로 내림차순 정렬
SELECT 시퀀스.NEXTVAL FROM DUAL;    
-시퀀스 다음 값 출력
COMMIT;
-오라클DB는 수동 커밋이라 작업후 커밋해줘야한다.
ROLLBACK;
-작업 전으로 롤백
CREATE VIEW 생성할뷰이름 AS 정렬이끝난쿼리문
-데이터를 정렬하는데 난잡해진 쿼리문을 뷰로 만들어 깔끔하게 만들 수 있다

사용 예)
select * from (
    select rownum num, n.* from (
        select * from notice order by regdate desc
    ) n
)
where num between 1 and 10;

==뷰로 변경==
create view notice_view
as
select * from (
    select rownum num, n.* from (
        select * from notice order by regdate desc
    ) n
);

==변경된 뷰로 쿼리 작성==
select * from notice_view where num between 1 and 10;


트랜잭션
-하나의 단위(목적)으로 수행되길 바라는 쿼리의 묶음(업무 수행단위, 논리적 수행단위)
-두개 이상의 쿼리 문장으로 이루어진 명령어

트랜잭션 처리
-ACID를 유지하는 것 (automaticity_원자성, consistency_일관성, isolation_독립성, durability_지속성)

DB작업 중 트랜잭션이 걸릴 경우 DB를 사용하는 다른 사용자에 의해 LOCK이 걸린 상태이다
함께 작업하는 작업자에게 COMMIT이나 ROLLBACK을 요청해야한다.



DB 연산자

산술 연산자
+, -, *, /
|| 문자열 더하기

비교 연산자
=, !=, ^=, <>, >, <, >=, <=, IS NULL, IS NOT NULL
!=, ^=, <>  용도가 같음
IS NULL, IS NOT NULL    사용예) select * from 테이블명 where is null

관계 연산자
NOT, AND, OR, BETWEEN, IN
BETWEEN 
-select * form 테이블명 where 속성명 between 0 and 2;  
0~2까지를 조회
IN 
-select * form 테이블명 where 속성명 in (0,2,7);  
0,2,7인 hit을 조회
NOT
-select * form 테이블명 where 속성명 not in (0,2,7); 
0,2,7을 제외한 hit을 조회

패턴 연산자
LIKE, %, _
select * from 테이블명 where 속성명 like '박%';  
-박으로 시작하는 문자열을 찾음
select * from 테이블명 where 속성명 not like '박%';
-박으로 시작하지 않는 모든 문자열
'%박%'
-박이란 문자가 포함된 문자열을 찾음
'박_';
-박이란 문자로 시작하는 두글자 문자열을 찾음
'_박__';
- 박을 포함해 앞으로 한글자 뒤로 두글자인 문자열 찾음



정규식을 이용한 패턴 검색
참고사이트
https://regexlib.com/CheatSheet.aspx


^\D\w*@\D\w*.(org|net|com)$	-이메일 검색 정규식
^01[016-9]-\d{3,4}-\d{4}$		-핸드폰 번호 검색 정규식

사용 법)
select * from 테이블명 where regexp_like(속성명, '01[016-9]-\d{3,4}-\d{4}');

정규식 시작을 뜻하는 ^과 끝 $을 제외하면 해당 패턴이 문자열 일부에 속해 있더라도 찾을 수 있다 



행을 제한하기 (페이징)_(ROWNUM)
select * from 테이블명 where rownum between 1 and 5;
rownum은 기존 테이블에 속해있는 속성이 아니고 결과집합을 만들어낼 때 임시로 생성되므로 between 2 ~ 이상으론 출력할 수 없다.
페이징을 위해서는 먼저 테이블에 rownum을 생성해준 것처럼 쿼리로 결과집합을 만들어준 상태에서
조건비교를 시켜야 한다.
사용 법)
select * from (select rownum 별칭, 테이블명.* from 테이블명) where 별칭 between 6 and 10; 


중복 값 제거(DISTINCT)
select distinct 속성명 from member;



